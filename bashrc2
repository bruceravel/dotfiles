# ~/.bashrc: executed by bash(1) for non-login shells.
# see /usr/share/doc/bash/examples/startup-files (in the package bash-doc)
# for examples

# If not running interactively, don't do anything
[ -z "$PS1" ] && return

# don't put duplicate lines in the history. See bash(1) for more options
# don't overwrite GNU Midnight Commander's setting of `ignorespace'.
export HISTCONTROL=$HISTCONTROL${HISTCONTROL+,}ignoredups
# ... or force ignoredups and ignorespace
export HISTCONTROL=ignoreboth:erasedups

# append to the history file, don't overwrite it
shopt -s histappend

# for setting history length see HISTSIZE and HISTFILESIZE in bash(1)

# check the window size after each command and, if necessary,
# update the values of LINES and COLUMNS.
shopt -s checkwinsize

# make less more friendly for non-text input files, see lesspipe(1)
[ -x /usr/bin/lesspipe ] && eval "$(SHELL=/bin/sh lesspipe)"

# set variable identifying the chroot you work in (used in the prompt below)
if [ -z "$debian_chroot" ] && [ -r /etc/debian_chroot ]; then
    debian_chroot=$(cat /etc/debian_chroot)
fi

# set a fancy prompt (non-color, unless we know we "want" color)
case "$TERM" in
    xterm-color) color_prompt=yes;;
esac

# uncomment for a colored prompt, if the terminal has the capability; turned
# off by default to not distract the user: the focus in a terminal window
# should be on the output of commands, not on the prompt
#force_color_prompt=yes

if [ -n "$force_color_prompt" ]; then
    if [ -x /usr/bin/tput ] && tput setaf 1 >&/dev/null; then
	# We have color support; assume it's compliant with Ecma-48
	# (ISO/IEC-6429). (Lack of such support is extremely rare, and such
	# a case would tend to support setf rather than setaf.)
	color_prompt=yes
    else
	color_prompt=
    fi
fi

if [ "$color_prompt" = yes ]; then
    PS1='${debian_chroot:+($debian_chroot)}\[\033[01;32m\]\u@\h\[\033[00m\]:\[\033[01;34m\]\w\[\033[00m\]\$ '
else
    PS1='${debian_chroot:+($debian_chroot)}\u@\h:\w\$ '
fi
unset color_prompt force_color_prompt

# If this is an xterm set the title to user@host:dir
case "$TERM" in
xterm*|rxvt*)
    PS1="\[\e]0;${debian_chroot:+($debian_chroot)}\u@\h: \w\a\]$PS1"
    ;;
*)
    ;;
esac

# Alias definitions.
# You may want to put all your additions into a separate file like
# ~/.bash_aliases, instead of adding them here directly.
# See /usr/share/doc/bash-doc/examples in the bash-doc package.

#if [ -f ~/.bash_aliases ]; then
#    . ~/.bash_aliases
#fi

# enable color support of ls and also add handy aliases
if [ -x /usr/bin/dircolors ]; then
    eval "`dircolors -b`"
    alias ls='ls --color=auto'
    #alias dir='dir --color=auto'
    #alias vdir='vdir --color=auto'

    #alias grep='grep --color=auto'
    #alias fgrep='fgrep --color=auto'
    #alias egrep='egrep --color=auto'
fi

# some more ls aliases
#alias ll='ls -l'
#alias la='ls -A'
#alias l='ls -CF'

# enable programmable completion features (you don't need to enable
# this, if it's already enabled in /etc/bash.bashrc and /etc/profile
# sources /etc/bash.bashrc).
if [ -f /etc/bash_completion ]; then
    . /etc/bash_completion
fi




## my modifications
export PERL5LIB=~/perl
export PERL5OPT=-I/home/bruce/git/demeter/lib
export PAGER=less
alias ecb="emacs -geometry 129x50+0+0 -fn 7x14 -f ecb-activate"
alias xemacs="xemacs -bg lemonchiffon3"
alias rm="rm -i"
alias pu=~/bin/purge
alias m=make

unalias ls
eval `dircolors -b ~/.dir_colors`
alias ls='env LC_ALL=C ls -F --color=auto'

complete -f -X '!*.@(pl|t|PL)' perl
complete -f -X '!*.prj' athena
complete -f -X '!*.inp' atoms
complete -f -X '!*.@(apj|prj|inp)' artemis


function wup {
sudo ifconfig wlan0 up
}

function wscan {
sudo iwlist wlan0 scan
}

function wid {
sudo iwconfig wlan0 essid $1
}

function wdh {
sudo dhclient wlan0
}


# Black       0;30     Dark Gray     1;30
# Blue        0;34     Light Blue    1;34
# Green       0;32     Light Green   1;32
# Cyan        0;36     Light Cyan    1;36
# Red         0;31     Light Red     1;31
# Purple      0;35     Light Purple  1;35
# Brown       0;33     Yellow        1;33
# Light Gray  0;37     White         1;37

function prompt
{

local BLACK="\[\033[0;30m\]"
local BLUE="\[\033[0;34m\]"
local GREEN="\[\033[0;32m\]"
local CYAN="\[\033[0;36m\]"
local RED="\[\033[0;31m\]"
local PURPLE="\[\033[0;35m\]"
local BROWN="\[\033[0;33m\]"
local LIGHT_GRAY="\[\033[0;37m\]"

local GRAY="\[\033[1;30m\]"
local LIGHT_BLUE="\[\033[1;34m\]"
local LIGHT_GREEN="\[\033[1;32m\]"
local LIGHT_CYAN="\[\033[1;36m\]"
local LIGHT_RED="\[\033[1;31m\]"
local LIGHT_PURPLE="\[\033[1;35m\]"
local YELLOW="\[\033[1;33m\]"
local WHITE="\[\033[1;37m\]"

local NONE="\[\033[0m\]"

if [ -n $SSH_CLIENT ]; then
    COLOR=$YELLOW
else
    COLOR=$GREEN
fi
local temp=$(tty)
local GRAD1=${temp:5}
PS1="$COLOR\u@\h$NONE $LIGHT_PURPLE[\W]$NONE $COLOR>$NONE " 
PS2="$LIGHT_RED ... >$NONE "
}
prompt
## elite
# PS1="$TITLEBAR\
# $GRAY-$CYAN-$LIGHT_CYAN(\
# $CYAN\u$GRAY@$CYAN\h\
# $LIGHT_CYAN)$CYAN-$LIGHT_CYAN(\
# $CYAN\#$GRAY/$CYAN$GRAD1\
# $LIGHT_CYAN)$CYAN-$LIGHT_CYAN(\
# $CYAN\$(date +%H%M)$GRAY/$CYAN\$(date +%d-%b-%y)\
# $LIGHT_CYAN)$CYAN-$GRAY-\
# $LIGHT_GRAY\n\
# $GRAY-$CYAN-$LIGHT_CYAN(\
# $CYAN\$$GRAY:$CYAN\w\
# $LIGHT_CYAN)$CYAN-$GRAY-$LIGHT_GRAY " 
