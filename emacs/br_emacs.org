#+TITLE: Emacs configuration file
#+AUTHOR: Bruce Ravel
#+BABEL: :cache yes
#+LATEX_HEADER: \usepackage{parskip}
#+LATEX_HEADER: \usepackage{inconsolata}
#+PROPERTY: header-args :tangle yes :comments org

* About

This is an Emacs configuration file written in [[http://orgmode.org][Org mode]] following
[[https://github.com/larstvei/dot-emacs][this example]].

I am not doing the fancy bit of having an initial =init.el= whose job
is to tangle this org file, overwriting the initial =init.el=.  That
seems a step too clever.  That said, do the following when setting up
a new machine.  Then exit and restart emacs.  Good to go!

   #+BEGIN_SRC emacs-lisp :tangle no
     ;; We can't tangle without org!
     (require 'org)
     ;; Open the configuration
     (find-file (concat user-emacs-directory "init.org"))
     ;; tangle it
     (org-babel-tangle)
   #+END_SRC



Tangle /this/ file to =.el= when saved.

   #+BEGIN_SRC emacs-lisp
     (defun tangle-init ()
       "If the current buffer is 'init.org' the code-blocks are
     tangled, and the tangled file is compiled."
       (when (equal (buffer-file-name)
                    (expand-file-name (concat user-emacs-directory "init.org")))
         ;; Avoid running hooks when tangling.
         (let ((prog-mode-hook nil))
           (org-babel-tangle)
           (byte-compile-file (concat user-emacs-directory "init.el")))))

     (add-hook 'after-save-hook 'tangle-init)
   #+END_SRC


A file called =local.el= contains customizations specific to a machine.

   #+BEGIN_SRC emacs-lisp
     (add-hook
      'after-init-hook
      (lambda ()
        (let ((local-file (concat user-emacs-directory "local.el")))
          (when (file-exists-p local-file)
            (load-file local-file)))))
   #+END_SRC



* Modes to look into

1. expand-region
2. company
3. ace-jump-mode
4. emacs-ide (http://emacs-ide.tuxfamily.org/) in case ECB ever rots
   away completely

* Configurations

** Package

Managing extensions for Emacs is simplified using =package= which is
built in to Emacs 24 and newer. To load downloaded packages we need to
initialize =package=. =cl= is a library that contains many functions from
Common Lisp, and comes in handy quite often, so we want to make sure it's
loaded, along with =package=, which is obviously needed.

   #+BEGIN_SRC emacs-lisp
     (require 'cl)
     (require 'package)
     (package-initialize)
   #+END_SRC

Packages can be fetched from different mirrors, [[http://melpa.milkbox.net/#/][melpa]] is the largest
archive and is well maintained.

   #+BEGIN_SRC emacs-lisp
     (setq package-archives
           '(("gnu" . "http://elpa.gnu.org/packages/")
             ("org" . "http://orgmode.org/elpa/")
             ("MELPA" . "http://melpa.milkbox.net/packages/")))
   #+END_SRC

The configuration assumes that the packages listed below are
installed. To ensure we install missing packages if they are missing.

   #+BEGIN_SRC emacs-lisp
     (let* ((packages
             '(idle-require         ; load elisp libraries while Emacs is idle
               auto-compile         ; automatically compile Emacs Lisp libraries
               magit                ; control Git from Emacs
               markdown-mode        ; major mode for Markdown-formatted files
               mustache-mode        ; mustache templating
               ecb                  ; code browser
               ack-and-a-half       ; ack interface
               org                  ; outline-based notes management and organizer
               powerline            ; rewrite of Powerline
               pdf-tools            ; pdf viewer in emacs
               tt-mode              ; mode for template toolkit templates
               ))
            ;; Remove all packages already installed
            (packages (remove-if 'package-installed-p packages)))
       (when packages
         (package-refresh-contents)
         (mapcar 'package-install packages)
         ))
   #+END_SRC

** Require

Some features are not loaded by default to minimize initialization
time, so they have to be required (or loaded, if you
will). =require=-calls tends to lead to the largest bottleneck's in a
configuration. =idle-require= delays the =require=-calls to a time
where Emacs is in idle. So this is great for stuff you eventually want
to load, but is not a high priority.

   #+BEGIN_SRC emacs-lisp
     (require 'idle-require)             ; Need in order to use idle-require

     (dolist (feature
              '(auto-compile             ; auto-compile .el files
                ox-latex                 ; the latex-exporter (from org)
                ox-md                    ; Markdown exporter (from org)
                recentf                  ; recently opened files
                tex-mode))               ; TeX, LaTeX, and SliTeX mode commands
       (idle-require feature))

     (setq idle-require-idle-delay 5)
     (idle-require-mode 1)
   #+END_SRC

** defaults

Set some sensible default values

   #+BEGIN_SRC emacs-lisp
     (add-to-list 'load-path "~/dotfiles/emacs")
     (add-to-list 'load-path "~/git/gnuplot-mode/")
     (setq
           inhibit-startup-message t       ; like ... duh!
           scroll-bar-mode (quote right)   ; put the scroll bar on the rght, where Zeus intended it
     )
   #+END_SRC

Some things to turn off

   #+BEGIN_SRC emacs-lisp
     (dolist (mode
              '(tool-bar-mode                ; No toolbars, more room for text.
             ))
       (funcall mode 0))
   #+END_SRC

And some things to turn on

   #+BEGIN_SRC emacs-lisp
     (dolist (mode
              '(show-paren-mode               ; highlight matching parens
                abbrev-mode                   ; teh --> the
             ))
        (funcall mode 1))
     (require 'powerline)
     (powerline-default-theme)
     (pdf-tools-install)
   #+END_SRC

Answering /yes/ and /no/ to each question from Emacs can be tedious, a
single /y/ or /n/ will suffice.

   #+BEGIN_SRC emacs-lisp
     (fset 'yes-or-no-p 'y-or-n-p)
   #+END_SRC

** abbrevs

Set the global abbrev table with some of my least favorite typos

   #+BEGIN_SRC emacs-lisp
     (define-abbrev-table 'global-abbrev-table
       '(
         ("atoim" "atom" nil 1)
         ("atoims" "atoms" nil 1)
         ("teh" "the" nil 2)
        ))
   #+END_SRC

** Theme

This sets my favorite theme, [[https://github.com/juba/color-theme-tangotango][tangotango]], which is not distributed with
emacs.  I keep my own copy in my emacs folder.  This works for
Emacs 24.  This setup was a lot more complicated in Emacs 23

   #+BEGIN_SRC emacs-lisp
     (add-to-list 'custom-theme-load-path "~/dotfiles/emacs")
     (load-theme 'tangotango t)
   #+END_SRC

   #+BEGIN_SRC emacs-lisp :tangle no
     ;(require 'color-theme)
     ;(setq color-theme-load-all-themes nil)

     ;; (require 'color-theme-tangotango) 
     ;; ; (require 'color-theme-bharadwaj)

     ;; ;; select theme - first list element is for windowing system, second is for console/terminal
     ;; ;; Source : http://www.emacswiki.org/emacs/ColorTheme#toc9
     ;; (setq color-theme-choices 
     ;;       '(color-theme-tangotango color-theme-tangotango))
     ;; ;      '(color-theme-bharadwaj color-theme-bharadwaj))

     ;; ;; default-start
     ;; (funcall (lambda (cols)
     ;;     	   (let ((color-theme-is-global nil))
     ;;     	     (eval 
     ;;     	      (append '(if (window-system))
     ;;     		      (mapcar (lambda (x) (cons x nil)) 
     ;;     			      cols)))))
     ;;     	 color-theme-choices)
     
     ;; ;; test for each additional frame or console
     ;; (require 'cl)
     ;; (fset 'test-win-sys 
     ;;       (funcall (lambda (cols)
     ;;     		 (lexical-let ((cols cols))
     ;;     		   (lambda (frame)
     ;;     		     (let ((color-theme-is-global nil))
     ;; 		       ;; must be current for local ctheme
     ;; 		       (select-frame frame)
     ;; 		       ;; test winsystem
     ;; 		       (eval 
     ;; 			(append '(if (window-system frame)) 
     ;; 				(mapcar (lambda (x) (cons x nil)) 
     ;; 					cols)))))))
     ;;     	       color-theme-choices ))
     ;; ;; hook on after-make-frame-functions
     ;; (add-hook 'after-make-frame-functions 'test-win-sys)

     ;; (color-theme-tangotango)
   #+END_SRC

** ECB

Setting stack-trace-on-error to =t= is necessary to get ECB to work
with Emacs 24, but it is bad for Emacs 23.  [[http://stackoverflow.com/questions/8833235/install-ecb-with-emacs-starter-kit-in-emacs-24][See this.]]  Then enable ecb
and set some customizations.

   #+BEGIN_SRC emacs-lisp
     (if (= emacs-major-version 24)
         (setq stack-trace-on-error t))
     ;;(add-to-list 'load-path "/home/bruce/dotfiles/emacs/ecb")
     (require 'ecb)
     (setq 
           ecb-history-make-buckets (quote mode)
           ecb-layout-name "leftright1"
           ecb-source-path (quote (("~/git" "git") ("~/TeX" "TeX") ("~/dotfiles" "dotfiles")))
           ecb-tip-of-the-day nil
     )
   #+END_SRC

** Programming

*** prog mode

I like linum in all programming modes (perl, python, fortran, c etc
all inherit from prog-mode as of Emacs 24.1).

   #+BEGIN_SRC emacs-lisp
     (add-hook 'prog-mode-hook 'linum-mode)
   #+END_SRC

*** perl

Use [[https://github.com/jrockway/cperl-mode][cperl-mode]] instead of the default.

   #+BEGIN_SRC emacs-lisp
     (defalias 'perl-mode 'cperl-mode)
   #+END_SRC

*** Fortran

A few fortran customizations

   #+BEGIN_SRC emacs-lisp
     (setq
           fortran-comment-indent-style (quote relative)
           fortran-continuation-indent 7
     )
   #+END_SRC

** Programming-adjacent modes

*** gnuplot mode

Enable [[https://github.com/bruceravel/gnuplot-mode][gnuplot-mode]] and set the =.gp= extension

   #+BEGIN_SRC emacs-lisp
     (autoload 'gnuplot-mode        "gnuplot"          "gnuplot major mode"                    t)
     (autoload 'gnuplot-make-buffer "gnuplot"          "open a buffer in gnuplot-mode"         t)
     (add-to-list 'auto-mode-alist '("\\.gp$"           . gnuplot-mode))
   #+END_SRC

*** Generic mode

[[http://emacswiki.org/emacs/GenericMode][See this]]

   #+BEGIN_SRC emacs-lisp
     (require 'generic-x)
     (add-to-list 'auto-mode-alist '("\\..*ignore$" . hosts-generic-mode))
   #+END_SRC

** Document formatting and generation

*** markdown mode

Enable [[https://github.com/defunkt/markdown-mode][markdown-mode]] and set the =.md= extension

   #+BEGIN_SRC emacs-lisp
     (autoload 'markdown-mode       "markdown-mode.el" "Major mode for editing Markdown files" t)
     (add-to-list 'auto-mode-alist '("\\.md$" . markdown-mode))
     (add-hook 'markdown-mode-hook
               (lambda ()
                 (auto-fill-mode t)
               ))
   #+END_SRC

*** template toolkit mode

Enable [[https://github.com/davorg/tt-mode][tt-mode]] for Template Toolkit and set the =.tt= extension

   #+BEGIN_SRC emacs-lisp
     (autoload 'tt-mode "tt-mode" "Major mode for Template Toolkit files" t)
     (add-to-list 'auto-mode-alist '("\\.tt$"           . tt-mode))
     (add-hook 'tt-mode-hook 
               (lambda ()
                 (linum-mode t)
                 (auto-fill-mode t)
               ))
   #+END_SRC

*** AucTex

This is a skeleton for my most-used Beamer construct in AucTex.  It
makes a columns environment with two 50% width columns.

   #+BEGIN_SRC emacs-lisp
     (define-skeleton beamer-columns-skeleton
       "Insert two columns in a Beamer file"
       nil
       > "\\begin{columns}[T]" \n
       -1 " \\begin{column}{0.5\\linewidth}" \n _ \n
       -3 " \\end{column}" \n
       -1 " \\begin{column}{0.5\\linewidth}" \n \n
       -3 " \\end{column}" \n
       -2 "\\end{columns}")

       (add-hook 'LaTeX-mode-hook 
	  (lambda ()
	    (auto-fill-mode t)
	    (reftex-mode t)
	    (define-key LaTeX-mode-map [(control c) (control \3)] 
	      'beamer-columns-skeleton)))

     (add-to-list 'auto-mode-alist '("\\.tex\\'" . latex-mode))
     (setq TeX-view-program-selection
           (quote (((output-dvi style-pstricks) "dvips and gv")
                    (output-dvi  "xdvi")
                    (output-pdf  "xdg-open")
                    (output-html "xdg-open"))))
   #+END_SRC

This prompts for width and y-position of the bottomnote environment
defined in =sty/header.tex= from [[https://github.com/bruceravel/XAS-Education][my XAS-Education repository]].  It uses
optional arguments from [[https://www.ctan.org/pkg/xparse][xparse]], thus the curly brackets inserted by
AucTex must be converted to square brackets.  (Note: an improvement
would be to remove empty brackets.)

   #+BEGIN_SRC emacs-lisp
     (defun LaTeX-after-insert-bottomnote (env start end)
       "Turn argument delimiters from {} into []"
       (when (string-equal env "bottomnote")
         (save-excursion
           (goto-char start)
           (forward-line 1)
           (backward-sexp 2)
           (let (value)
                (dotimes (number 2 value)             ;fix TWO argument brackets
                  (re-search-forward "{\\([^}]*\\)}") ;open curly, followed by
                                                      ;not close curly,
                                                      ;followed by close curly
                  (replace-match "[\\1]")             ;replace with square brackets
               ))
           )
         )
       )
     (add-hook 'LaTeX-after-insert-env-hooks 'LaTeX-after-insert-bottomnote  nil nil)
   #+END_SRC

Note to self: /biblatex/

*** mustache-mode

Templating using [[https://mustache.github.io/][mustache]] and/or [[https://github.com/defunkt/pystache][pystache]].  This is used in
[[https://github.com/xraypy/feff85exafs][feff85exafs]] unit testing framework and by [[https://github.com/bruceravel/SCFtests][SCFtests]].

   #+BEGIN_SRC emacs-lisp
     (require 'mustache-mode)
   #+END_SRC

*** Demeter templates

Demeter uses [[https://metacpan.org/pod/Text::Template][Text::Template]] for its templates which generate code for
ifeffit, larch, feff, atoms, gnuplot, and other things.  Demeter comes
with a crappy little major mode that does more or less the right
things for ifeffit templates.  /To do: update ifeffit-mode to do
syntax highlighting for larch, feff, and gnuplot./

   #+BEGIN_SRC emacs-lisp
      (let ((ifm-file "~/git/demeter/tools/ifeffit-mode.el"))
         (when (file-exists-p ifm-file)
            (load-file ifm-file)
            (autoload 'ifm-mode "ifeffit-macro" "ifm mode." t)
            ))
   #+END_SRC

** Flyspell

   Flyspell offers on-the-fly spell checking. We can enable flyspell for all
   text-modes with this snippet.

   #+BEGIN_SRC emacs-lisp
     (add-hook 'text-mode-hook 'turn-on-flyspell)
   #+END_SRC

   To use flyspell for programming there is =flyspell-prog-mode=, that only
   enables spell checking for comments and strings. We can enable it for all
   programming modes using the =prog-mode-hook=.

   #+BEGIN_SRC emacs-lisp
     (add-hook 'prog-mode-hook 'flyspell-prog-mode)
   #+END_SRC

** Org

   When editing org-files with source-blocks, we want the source blocks to
   be themed as they would in their native mode.

   #+BEGIN_SRC emacs-lisp
     (setq org-src-fontify-natively t
           org-confirm-babel-evaluate nil)
   #+END_SRC

** Ack integration

Use Ack in emacs

   #+BEGIN_SRC emacs-lisp
     (defalias 'ack 'ack-and-a-half)
     (defalias 'ack-same 'ack-and-a-half-same)
     (defalias 'ack-find-file 'ack-and-a-half-find-file)
     (defalias 'ack-find-file-same 'ack-and-a-half-find-file-same)
   #+END_SRC

** mail

[[http://os.inf.tu-dresden.de/~mp26/download/tbemail.el][tbemail.el]] is a simple editing mode useful when using emacs as the
composer for Thunderbird.  I keep a copy in my emacs folder.

   #+BEGIN_SRC emacs-lisp
     (require 'tbemail)
     (add-hook 'tbemail-mode-hook 'auto-fill-mode)
   #+END_SRC


* Key Bindings

A few key bindings programmed into my wrists...

   #+BEGIN_SRC emacs-lisp
     (global-set-key [home]  'beginning-of-buffer)
     (global-set-key [end]   'end-of-buffer)
     (global-set-key "\C-x/" 'point-to-register)
     (global-set-key "\C-xj" 'register-to-point)
     (global-set-key [f12]   'magit-status)
   #+END_SRC
